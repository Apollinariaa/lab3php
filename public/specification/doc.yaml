openapi: 3.0.3
info:
  title: Swagger Store - OpenAPI 3.0
  version: 1.0.11
servers:
  - url:  http://127.0.0.1:8000/api/v1/
    description: Dev server
paths:
  /street:
    get:
      tags:
        - Street
      summary: Get all street
      operationId: getStreet
      responses:
        '200':
          description: Successful get street
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Street'  
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Street is not found
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    post:
      tags:
        - Street
      summary: Create new street
      operationId: createStreet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Street'
      responses:
        '200':
          description: Successful create street
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Street'  
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Street is not found
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   

  /street/{street_id}:
    get:
      tags:
        - Street
      summary: Get street by id
      operationId: getStreetById
      parameters: 
        - name: street_id
          in: path
          required: true
          description: id of street
          schema:
            type: string
      responses:
        '200':
          description: Successful get street by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Street'   
        '400':
          description: Invalid id street
        '404':
          description: Street is not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    delete:
      tags:
        - Street
      summary: Delete street by id
      operationId: deleteStreetById
      parameters: 
        - name: street_id
          in: path
          required: true
          description: id of street
          schema:
            type: string
      responses:
        '200':
          description: Successful delete street by id
          content:
            application/json: {} 
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Street is not found
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    put:
      tags:
        - Street
      summary: Update all parameter street by id
      description: update street by id
      operationId: updateStreet
      parameters: 
        - name: street_id
          in: path
          required: true
          description: id of street
          schema:
            type: string  
      requestBody:
        description: Update street by id (put)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Street'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Street'     
        '400':
          description: Invalid id supplied
        '404':
          description: street is not found
        '405':
          description: Validation exception
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    patch:
      tags:
        - Street
      summary: Update street by id
      description: Update street by id
      operationId: updateStreet
      parameters: 
        - name: street_id
          in: path
          required: true
          description: id of street
          schema:
            type: string
        - in: query
          name: street
          description: street object that needs to be updated
          required: true
          schema:
            $ref: '#/components/schemas/Street'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Street'          
        '400':
          description: Invalid id supplied
        '404':
          description: Street is not found
        '405':
          description: Validation exception
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
                
  /house:
    get:
      summary: Get all house
      tags:
        - House
      operationId: getCategories
      responses:
        '200':
          description: Successful getting house
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: House is not found
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    post:
      tags:
        - House
      summary: Create new house
      operationId: createHouse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/House'
      responses:
        '201':
          description: Successful creating of house
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'   
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: House is not found
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
                
  /house/{house_id}:
    get:
      summary: Get house by id
      tags:
        - House
      operationId: getHouseById
      parameters: 
        - name: house_id
          in: path
          required: true
          description: id of house
          schema:
            type: string
      responses:
        '200':
          description: Successful get house by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'   
        '400':
          description: Invalid ID house
        '404':
          description: House is not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    delete:
      tags:
        - House
      summary: Delete house by id
      operationId: deleteHouseById
      parameters: 
        - name: house_id
          in: path
          required: true
          description: id of house
          schema:
            type: string
      responses:
        '204':
          description: Successful delete house by id
          content:
            application/json: {} 
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: House is not found
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    put:
      summary: Update all parasmeter house 
      tags:
        - House
      description: Update house by id
      operationId: updateHouse
      parameters: 
        - name: house_id
          in: path
          required: true
          description: id of house
          schema:
            type: string
      requestBody:
        description: Update an existent house
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/House'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'          
        '400':
          description: Invalid id supplied
        '404':
          description: House not found
        '405':
          description: Validation exception
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    patch:
      tags:
        - House
      summary: Update house by id
      description: Update house by id
      operationId: updateHouse
      parameters: 
        - name: house_id
          in: path
          required: true
          description: id of house
          schema:
            type: string
      requestBody:
        description: Update house
        content:
          application/json: {} 
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'          
        '400':
          description: Invalid id supplied
        '404':
          description: House is not found
        '405':
          description: Validation exception
        'default':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
                
components:
  schemas:
    Street:
      type: object
      required:
        - name
        - km
        - city
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Vernaya
        km:
          type: integer
          format: int32
          example: 11
        city:
          type: string
          example: Moscow
        
    Streets:
      type: array
      items:
        $ref: "#/components/schemas/Street"
        
    House:
      type: object
      required:
        - name
        - street_id
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: moscow city
        street_id:
          type: integer
          format: int32
          example: 3
        house_type:
          type: string
          example: big
        number_of_floors:
          type: integer
          format: int32
          example: 40
        active_to:
          type: string
          format: date-time
        active_from:
          type: string
          format: date-time
        
    Houses:
      type: array
      items:
        $ref: "#/components/schemas/House"
        
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          